; *******************************************************************
; Copyright (C) 2016-2018 Giorgio Calderone
;
; This program is free software; you can redistribute it and/or
; modify it under the terms of the GNU General Public icense
; as published by the Free Software Foundation; either version 2
; of the License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <http://www.gnu.org/licenses/>.
;
; *******************************************************************


;=====================================================================
;GFIT MODEL COMPONENT
;
;NAME:
;  qsfit_comp_ironoptical
;
;COMPONENT DESCRIPTION:
;  The iron template at optical wavelengths from Veron-Cetty et
;  al. 2004.  The template is generated by summing a Gaussian profile
;  for each line listed in tables A.1 and A.2 of Veron-Cetty et
;  al. (2004), excluding the hydrogen Balmer lines.  The "broad" and
;  "narrow" emission lines are kept separated, each with their own
;  parameters.  We considered only the William Herschel Telescope
;  (WHT) intensities.
;
;PARAMETERS:
;  NORM_BR, NORM_NA (units: [X*Y])
;    Total flux in the iron broad and narrow complex respectively.
;
;  FWHM_BR, FWHM_NA (units: km s^-1)
;    FWHM of emission line for the broad and narrow complex
;    respectively. This parameter is used to broaden the iron template
;    by convolution with a Gaussian kernel.
;
;OPTIONS:
;  NONE
;
;REFERENCES:
;  Veron-Cetty, Joly and Veron, 2004, A&A, 417, 515
;  http://adsabs.harvard.edu/abs/2004A%26A...417..515V
;


PRO qsfit_comp_ironoptical_prepare, templ_br, templ_na
  COMPILE_OPT IDL2
  ON_ERROR, !glib.on_error

  gprint, 'Preparation of Veron-Cetty et al. (2004) optical iron template...'

  ;;Check input files are available
  path = FILE_DIRNAME(ROUTINE_FILEPATH('qsfit_comp_ironoptical_prepare')) + PATH_SEP()
  path += 'VC2004' + PATH_SEP()
  IF (~gfexists(path + 'TabA1')) THEN $
     MESSAGE, 'Could not found Veron-Cetty et al. (2004) template files in directory: ' + path

  ;;Read input files
  template = {line: '', transition: '', ul:0., wavelength: 0., aat:0., wht: 0.}
  broad  = greadtexttable(path + 'TabA1', /drop, template=template)
  narrow = greadtexttable(path + 'TabA2', /drop, template=template)
  broad  = broad [WHERE(FINITE(broad.wht))]
  narrow = narrow[WHERE(FINITE(narrow.wht))]

  ;;Drop Balmer lines (they are accounted for in the main QSFIT code)
  broad  = broad [WHERE(STRMID(broad.line , 0, 2) NE 'H$')]
  narrow = narrow[WHERE(STRMID(narrow.line, 0, 2) NE 'H$')]

  ;;Pre-compute the broadened teplates
  ;;(see Sect. 3 of Vestergaard&Wilkes 2001)

  ;;Grid of FWHM values
  fwhm_na = gloggen(1.e2, 1.e3, 300)
  fwhm_br = gloggen(1.e3, 2.e4, 300)

  ;;Grid of wavelengths
  ref_x = ggen(3300, 7400, 2000)

  ;;Prepare return structure
  templ_br = {  x:   ref_x,                          $
                y:   FLTARR(gn(ref_x), gn(fwhm_br)), $
                fwhm: fwhm_br                        $
             }
  templ_na = {  x:   ref_x,                          $
                y:   FLTARR(gn(ref_x), gn(fwhm_na)), $
                fwhm: fwhm_na                        $
             }

  ;;Generate templates
  FOR i=0, gn(fwhm_br)-1 DO BEGIN
     templ_br.y[*,i] = templ_br.x * 0.
     FOR j=0, gn(broad)-1 DO BEGIN
        ;;Compute sigma of Gaussian profile in units of c
        sigma = fwhm_br[i] / 2.35 / 3.e5 * broad[j].wavelength
        templ_br.y[*,i] += broad[j].wht * ggauss(ref_x, broad[j].wavelength, sigma)
     ENDFOR
     templ_br.y[*,i] /= INT_TABULATED(templ_br.x, templ_br.y[*,i])
  ENDFOR

  FOR i=0, gn(fwhm_na)-1 DO BEGIN
     templ_na.y[*,i] = templ_na.x * 0.
     FOR j=0, gn(narrow)-1 DO BEGIN
        ;;Compute sigma of Gaussian profile in units of c
        sigma = fwhm_na[i] / 2.35 / 3.e5 * narrow[j].wavelength
        templ_na.y[*,i] += narrow[j].wht * ggauss(ref_x, narrow[j].wavelength, sigma)
     ENDFOR
     templ_na.y[*,i] /= INT_TABULATED(templ_na.x, templ_na.y[*,i])
  ENDFOR


  IF (0) THEN BEGIN
     ggp_clear
     ggp_cmd, xtit='Wavelength [AA]', ytit='Flux density [arb. units]'
     dummy = MIN(ABS(templ_br.fwhm - 3000), i3000)
     FOREACH i, [0, i3000, gn(templ_br.fwhm)-1] DO BEGIN
        ggp_data, templ_br.x, templ_br.y[*,i], plot='w l t "FWHM=' + gn2s(templ_br.fwhm[i]) + ' km/s"'

        x  = templ_br.x
        y0 = templ_br.y[*,i]
        xref = INT_TABULATED(x, x*y0)
        y1 = (x/xref)^(0.5)
        y2 = (x/xref)^(-3.)
        PRINT, 'BR ', templ_br.fwhm[i], xref, INT_TABULATED(x, y0/y1), INT_TABULATED(x, y0/y2)
      END
     ggp

     ggp_clear
     ggp_cmd, xtit='Wavelength [AA]', ytit='Flux density [arb. units]'
     dummy = MIN(ABS(templ_na.fwhm - 300), i300)
     FOREACH i, [0, i300, gn(templ_na.fwhm)-1] DO BEGIN
        ggp_data, templ_na.x, templ_na.y[*,i], plot='w l t "FWHM=' + gn2s(templ_na.fwhm[i]) + ' km/s"'

        x  = templ_na.x
        y0 = templ_na.y[*,i]
        xref = INT_TABULATED(x, x*y0)
        y1 = (x/xref)^(0.5)
        y2 = (x/xref)^(-3.)
        PRINT, 'NA ', templ_na.fwhm[i], xref, INT_TABULATED(x, y0/y1), INT_TABULATED(x, y0/y2)
     END
     ggp

     ;;BR/NA    FWHM         xref         slope=0.5    slope=-3
     ;;BR       1000.00      5052.03      1.01169      1.09531
     ;;BR       3010.51      5052.03      1.01169      1.09537
     ;;BR       20000.0      5050.49      1.01195      1.09751

     ;;NA       100.000      4619.20      1.00828      1.07443
     ;;NA       300.788      4661.23      1.00829      1.07389
     ;;NA       500.031      4661.98      1.00829      1.07386
     ;;NA       1000.00      4662.12      1.00829      1.07386
  ENDIF
END



PRO qsfit_comp_ironoptical_init, comp
  COMPILE_OPT IDL2
  ON_ERROR, !glib.on_error
  COMMON COM_qsfit_comp_ironoptical, templ_br, templ_na

  path = FILE_DIRNAME(ROUTINE_FILEPATH('qsfit_comp_ironoptical_prepare')) + PATH_SEP()
  IF (gn(templ_br) EQ 0) THEN BEGIN
     file = path + 'qsfit_comp_ironoptical.dat'
     IF (gfexists(file)) THEN $
        RESTORE, file $
     ELSE BEGIN
        qsfit_comp_ironoptical_prepare, templ_br, templ_na
        SAVE, file=file, /compress, templ_br, templ_na
     ENDELSE
  ENDIF
  cur_br = []
  cur_na = []

  comp.par.norm_br.val       = 100
  comp.par.norm_br.limits[0] = 0

  comp.par.norm_na.val       = 100
  comp.par.norm_na.limits[0] = 0

  comp.par.fwhm_br.val    = 3000
  comp.par.fwhm_br.limits = gminmax(templ_br.fwhm)
  comp.par.fwhm_br.step   = templ_br.fwhm[1] - templ_br.fwhm[0]
  
  comp.par.fwhm_na.val    = 500
  comp.par.fwhm_na.limits = gminmax(templ_na.fwhm)
  comp.par.fwhm_na.step   = templ_na.fwhm[1] - templ_na.fwhm[0]
END


FUNCTION qsfit_comp_ironoptical_opt, comp
  opt = {fwhmFixed_na: gnan(), fwhmFixed_br: gnan()}
  RETURN, opt
END


FUNCTION qsfit_comp_ironoptical_cdata, comp, x, cdata
  COMPILE_OPT IDL2
  ON_ERROR, !glib.on_error
  COMMON COM_qsfit_comp_ironoptical, templ_br, templ_na
  IF (gn(cdata) GT 0) THEN RETURN, cdata

  ifwhm_br = LINDGEN(gn(templ_br.fwhm))
  IF (FINITE(comp.opt.fwhmFixed_br)) THEN $
     dummy = MIN(ABS(comp.opt.fwhmFixed_br - templ_br.fwhm), ifwhm_br)

  ifwhm_na = LINDGEN(gn(templ_na.fwhm))
  IF (FINITE(comp.opt.fwhmFixed_na)) THEN $
     dummy = MIN(ABS(comp.opt.fwhmFixed_na - templ_na.fwhm), ifwhm_na)


  ;;Initialize templates using current X values
  gprint, 'Interpolation of Veron-Cetty (2004) optical iron template...' 
  br_yy = FLTARR(gn(x), gn(ifwhm_br))
  na_yy = FLTARR(gn(x), gn(ifwhm_na))

  FOR i=0, gn(ifwhm_br)-1 DO br_yy[*,i] = INTERPOL(REFORM(templ_br.y[*,ifwhm_br[i]]), templ_br.x, x)
  FOR i=0, gn(ifwhm_na)-1 DO na_yy[*,i] = INTERPOL(REFORM(templ_na.y[*,ifwhm_na[i]]), templ_na.x, x)
  br_yy = (br_yy > 0) 
  na_yy = (na_yy > 0) 

  cdata = {br_fwhm: templ_br.fwhm[ifwhm_br], br_y: br_yy, $
           na_fwhm: templ_na.fwhm[ifwhm_na], na_y: na_yy  $
          }

  RETURN, PTR_NEW(cdata)
END

FUNCTION qsfit_comp_ironoptical, x, norm_br, fwhm_br, norm_na, fwhm_na, cdata=cdata, opt=opt
  COMPILE_OPT IDL2
  ON_ERROR, !glib.on_error

  IF (FINITE(opt.fwhmFixed_na)) THEN BEGIN
     IF (opt.fwhmFixed_na NE fwhm_na) THEN $
        MESSAGE, 'FWHM_NA value should be fixed to ' + gn2s(opt.fwhmFixed_na), ' while it is ' + gn2s(fwhm_na)
  ENDIF
  IF (FINITE(opt.fwhmFixed_br)) THEN BEGIN
     IF (opt.fwhmFixed_br NE fwhm_br) THEN $
        MESSAGE, 'FWHM_BR value should be fixed to ' + gn2s(opt.fwhmFixed_br), ' while it is ' + gn2s(fwhm_br)
  ENDIF

  ;;Search for the template with the closest value of FWHM
  dummy = MIN(ABS(fwhm_br - (*cdata).br_fwhm), ibr)
  dummy = MIN(ABS(fwhm_na - (*cdata).na_fwhm), ina)

  RETURN, norm_br * REFORM((*cdata).br_y[*, ibr]) + $
          norm_na * REFORM((*cdata).na_y[*, ina])
END





